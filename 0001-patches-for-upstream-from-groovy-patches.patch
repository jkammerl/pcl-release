From fe89b02f95e1894cd73a7b9e3f8c3de0ea3d8b29 Mon Sep 17 00:00:00 2001
From: Julius Kammerl <julius@kammerl.de>
Date: Fri, 22 Mar 2013 01:20:36 -0700
Subject: [PATCH 1/2] patches for upstream from groovy-patches

---
 CMakeLists.txt                           |    4 ++
 cmake/pcl_find_ros.cmake                 |   18 +++---
 common/CMakeLists.txt                    |    2 +-
 common/include/pcl/ModelCoefficients.h   |   46 --------------
 common/include/pcl/PointIndices.h        |   44 -------------
 common/include/pcl/PolygonMesh.h         |   53 ----------------
 common/include/pcl/Vertices.h            |   42 -------------
 common/include/pcl/point_cloud.h         |    2 +-
 common/include/pcl/point_types.h         |   12 ++--
 common/include/sensor_msgs/Image.h       |   61 ------------------
 common/include/sensor_msgs/PointCloud2.h |  101 ------------------------------
 common/include/sensor_msgs/PointField.h  |   54 ----------------
 common/include/std_msgs/Header.h         |   39 ------------
 13 files changed, 23 insertions(+), 455 deletions(-)
 delete mode 100644 common/include/pcl/ModelCoefficients.h
 delete mode 100644 common/include/pcl/PointIndices.h
 delete mode 100644 common/include/pcl/PolygonMesh.h
 delete mode 100644 common/include/pcl/Vertices.h
 delete mode 100644 common/include/sensor_msgs/Image.h
 delete mode 100644 common/include/sensor_msgs/PointCloud2.h
 delete mode 100644 common/include/sensor_msgs/PointField.h
 delete mode 100644 common/include/std_msgs/Header.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8a735bc..3b77bf5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -6,6 +6,10 @@ if("${CMAKE_BUILD_TYPE}" STREQUAL "")
   set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "build type default to RelWithDebInfo, set to Release to improve performance" FORCE)
 endif("${CMAKE_BUILD_TYPE}" STREQUAL "")
 
+project(pcl)
+find_package(catkin)
+catkin_package()
+
 project(PCL)
 string(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWER)
 
diff --git a/cmake/pcl_find_ros.cmake b/cmake/pcl_find_ros.cmake
index 9e4fd3b..4e80164 100644
--- a/cmake/pcl_find_ros.cmake
+++ b/cmake/pcl_find_ros.cmake
@@ -2,9 +2,9 @@
 
 # A macro for linking the ROS libraries.  (Might not be necessary... todo: add this logic at the find_package(ROS))
 macro(link_ros_libs _target)
-  if(ROS_FOUND)
+  if(catkin_FOUND)
     # if find_package(ROS ...) found the required libraries, link against those
-    target_link_libraries(${_target} ${ROS_LIBRARIES})
+    target_link_libraries(${_target} ${catkin_LIBRARIES})
   elseif(USE_ROS)
     # otherwise, we have to specify them here
     target_link_libraries(${_target} sensor_msgs roscpp_serialization rosconsole rostime)
@@ -23,16 +23,16 @@ macro(get_ros_inc_path _dest _pkg)
 endmacro(get_ros_inc_path)
 
 #todo: do we really need the next two lines? 
-set(ROS_ROOT $ENV{ROS_ROOT})
-if(ROS_ROOT)
-    option(USE_ROS "Integrate with ROS rather than using native files" OFF)
+#set(ROS_ROOT $ENV{ROS_ROOT})
+#if(ROS_ROOT)
+    option(USE_ROS "Integrate with ROS rather than using native files" ON)
     message(STATUS "Found ROS; USE_ROS is ${USE_ROS}")
     if(USE_ROS)
         # Search for ROS
-        find_package(ROS COMPONENTS catkin roscpp_serialization std_msgs sensor_msgs rostime)
-	if (ROS_FOUND)
+        find_package(catkin REQUIRED COMPONENTS roscpp_serialization std_msgs sensor_msgs rostime)
+	if (catkin_FOUND)
 	  # if find_package(ROS ...) found the required components, add their include directories
-          include_directories(${ROS_INCLUDE_DIRS})
+          include_directories(${catkin_INCLUDE_DIRS})
 	else()
           # otherwise, search for these particular packages the old hacky way	  
           set(_ros_pkgs std_msgs sensor_msgs roscpp_serialization cpp_common rostime
@@ -64,5 +64,5 @@ if(ROS_ROOT)
         SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
 
     endif(USE_ROS)
-endif(ROS_ROOT)
+#endif(ROS_ROOT)
 
diff --git a/common/CMakeLists.txt b/common/CMakeLists.txt
index ac6a9d7..5d8744a 100644
--- a/common/CMakeLists.txt
+++ b/common/CMakeLists.txt
@@ -55,6 +55,7 @@ if(build)
         include/pcl/channel_properties.h
         include/pcl/for_each_type.h
         include/pcl/pcl_tests.h
+        include/pcl/TextureMesh.h
         )
         
     if(NOT USE_ROS)
@@ -63,7 +64,6 @@ if(build)
           include/pcl/PolygonMesh.h
           include/pcl/Vertices.h
           include/pcl/PointIndices.h
-          include/pcl/TextureMesh.h
           )
 
         set(sensor_msg_incs 
diff --git a/common/include/pcl/ModelCoefficients.h b/common/include/pcl/ModelCoefficients.h
deleted file mode 100644
index f052179..0000000
--- a/common/include/pcl/ModelCoefficients.h
+++ /dev/null
@@ -1,46 +0,0 @@
-#ifndef PCL_MESSAGE_MODELCOEFFICIENTS_H
-#define PCL_MESSAGE_MODELCOEFFICIENTS_H
-#include <string>
-#include <vector>
-#include <ostream>
-
-// Include the correct Header path here
-#include "std_msgs/Header.h"
-
-namespace pcl
-{
-  struct ModelCoefficients
-  {
-    ModelCoefficients () : header (), values ()
-    {
-    }
-
-    ::std_msgs::Header header;
-
-    std::vector<float> values;
-
-  public:
-    typedef boost::shared_ptr< ::pcl::ModelCoefficients> Ptr;
-    typedef boost::shared_ptr< ::pcl::ModelCoefficients  const> ConstPtr;
-  }; // struct ModelCoefficients
-
-  typedef boost::shared_ptr< ::pcl::ModelCoefficients> ModelCoefficientsPtr;
-  typedef boost::shared_ptr< ::pcl::ModelCoefficients const> ModelCoefficientsConstPtr;
-
-  inline std::ostream& operator<<(std::ostream& s, const  ::pcl::ModelCoefficients & v)
-  {
-    s << "header: " << std::endl;
-    s << v.header;
-    s << "values[]" << std::endl;
-    for (size_t i = 0; i < v.values.size (); ++i)
-    {
-      s << "  values[" << i << "]: ";
-      s << "  " << v.values[i] << std::endl;
-    }
-    return (s);
-  }
-
-} // namespace pcl
-
-#endif // PCL_MESSAGE_MODELCOEFFICIENTS_H
-
diff --git a/common/include/pcl/PointIndices.h b/common/include/pcl/PointIndices.h
deleted file mode 100644
index 4c90a5d..0000000
--- a/common/include/pcl/PointIndices.h
+++ /dev/null
@@ -1,44 +0,0 @@
-#ifndef PCL_MESSAGE_POINTINDICES_H
-#define PCL_MESSAGE_POINTINDICES_H
-#include <string>
-#include <vector>
-#include <ostream>
-
-// Include the correct Header path here
-#include "std_msgs/Header.h"
-
-namespace pcl
-{
-  struct PointIndices
-  {
-    PointIndices () : header (), indices ()
-    {}
-
-    ::std_msgs::Header header;
-
-    std::vector<int> indices;
-
-    public:
-      typedef boost::shared_ptr< ::pcl::PointIndices> Ptr;
-      typedef boost::shared_ptr< ::pcl::PointIndices const> ConstPtr;
-  }; // struct PointIndices
-
-  typedef boost::shared_ptr< ::pcl::PointIndices> PointIndicesPtr;
-  typedef boost::shared_ptr< ::pcl::PointIndices const> PointIndicesConstPtr;
-
-  inline std::ostream& operator << (std::ostream& s, const ::pcl::PointIndices &v)
-  {
-    s << "header: " << std::endl;
-    s << "  " << v.header;
-    s << "indices[]" << std::endl;
-    for (size_t i = 0; i < v.indices.size (); ++i)
-    {
-      s << "  indices[" << i << "]: ";
-      s << "  " << v.indices[i] << std::endl;
-    }
-    return (s);
-  }
-} // namespace pcl
-
-#endif // PCL_MESSAGE_POINTINDICES_H
-
diff --git a/common/include/pcl/PolygonMesh.h b/common/include/pcl/PolygonMesh.h
deleted file mode 100644
index 363edcd..0000000
--- a/common/include/pcl/PolygonMesh.h
+++ /dev/null
@@ -1,53 +0,0 @@
-/* Auto-generated by genmsg_cpp for file /work/ros/pkgs-trunk/point_cloud_perception/pcl/msg/PolygonMesh.msg */
-#ifndef PCL_MESSAGE_POLYGONMESH_H
-#define PCL_MESSAGE_POLYGONMESH_H
-#include <string>
-#include <vector>
-#include <ostream>
-
-// Include the correct Header path here
-#include "std_msgs/Header.h"
-#include "sensor_msgs/PointCloud2.h"
-#include <pcl/Vertices.h>
-
-namespace pcl
-{
-  struct PolygonMesh
-  {
-    PolygonMesh () : header (), cloud (), polygons ()
-    {}
-
-    ::std_msgs::Header  header;
-
-    ::sensor_msgs::PointCloud2 cloud;
-
-    std::vector< ::pcl::Vertices>  polygons;
-
-
-  public:
-    typedef boost::shared_ptr< ::pcl::PolygonMesh> Ptr;
-    typedef boost::shared_ptr< ::pcl::PolygonMesh const> ConstPtr;
-  }; // struct PolygonMesh
-
-  typedef boost::shared_ptr< ::pcl::PolygonMesh> PolygonMeshPtr;
-  typedef boost::shared_ptr< ::pcl::PolygonMesh const> PolygonMeshConstPtr;
-
-  inline std::ostream& operator<<(std::ostream& s, const  ::pcl::PolygonMesh &v)
-  {
-    s << "header: " << std::endl;
-    s << v.header;
-    s << "cloud: " << std::endl;
-    s << v.cloud;
-    s << "polygons[]" << std::endl;
-    for (size_t i = 0; i < v.polygons.size (); ++i)
-    {
-      s << "  polygons[" << i << "]: " << std::endl;
-      s << v.polygons[i];
-    }
-    return (s);
-  }
-
-} // namespace pcl
-
-#endif // PCL_MESSAGE_POLYGONMESH_H
-
diff --git a/common/include/pcl/Vertices.h b/common/include/pcl/Vertices.h
deleted file mode 100644
index 631b8c0..0000000
--- a/common/include/pcl/Vertices.h
+++ /dev/null
@@ -1,42 +0,0 @@
-#ifndef PCL_MESSAGE_VERTICES_H
-#define PCL_MESSAGE_VERTICES_H
-#include <string>
-#include <vector>
-#include <ostream>
-#include <pcl/pcl_macros.h>
-
-namespace pcl
-{
-  /** \brief Describes a set of vertices in a polygon mesh, by basically
-    * storing an array of indices.
-    */
-  struct Vertices
-  {
-    Vertices () : vertices ()
-    {}
-
-    std::vector<uint32_t> vertices;
-
-  public:
-    typedef boost::shared_ptr<Vertices> Ptr;
-    typedef boost::shared_ptr<Vertices const> ConstPtr;
-  }; // struct Vertices
-
-
-  typedef boost::shared_ptr<Vertices> VerticesPtr;
-  typedef boost::shared_ptr<Vertices const> VerticesConstPtr;
-
-  inline std::ostream& operator<<(std::ostream& s, const  ::pcl::Vertices & v)
-  {
-    s << "vertices[]" << std::endl;
-    for (size_t i = 0; i < v.vertices.size (); ++i)
-    {
-      s << "  vertices[" << i << "]: ";
-      s << "  " << v.vertices[i] << std::endl;
-    }
-    return (s);
-  }
-} // namespace pcl
-
-#endif // PCL_MESSAGE_VERTICES_H
-
diff --git a/common/include/pcl/point_cloud.h b/common/include/pcl/point_cloud.h
index 12205dd..d2a6c98 100644
--- a/common/include/pcl/point_cloud.h
+++ b/common/include/pcl/point_cloud.h
@@ -649,7 +649,7 @@ namespace pcl
         width (pc.width), height (pc.height), is_dense (pc.is_dense)
       {
         // Copy the obvious
-        properties.acquisition_time   = pc.header.stamp;
+        properties.acquisition_time   = pc.header.stamp.sec;
         properties.sensor_origin      = pc.sensor_origin_;//.head<3> ();
         properties.sensor_orientation = pc.sensor_orientation_;
 
diff --git a/common/include/pcl/point_types.h b/common/include/pcl/point_types.h
index 2020254..5e18a54 100644
--- a/common/include/pcl/point_types.h
+++ b/common/include/pcl/point_types.h
@@ -53,7 +53,10 @@
 
 // We're doing a lot of black magic with Boost here, so disable warnings in Maintainer mode, as we will never
 // be able to fix them anyway
-#pragma warning(disable: 4201)
+#if defined _MSC_VER
+  #pragma warning(disable: 4201)
+#endif
+
 //#pragma warning(push, 1)
 #ifdef BUILD_Maintainer
 #  if defined __GNUC__
@@ -185,8 +188,7 @@ namespace pcl
     * \ingroup common
     * \deprecated USE SHOT352 FOR SHAPE AND SHOT1344 FOR SHAPE+COLOR INSTEAD
     */
-  struct
-  PCL_DEPRECATED_CLASS (SHOT, "USE SHOT352 FOR SHAPE AND SHOT1344 FOR SHAPE+COLOR INSTEAD");
+  struct SHOT;
 
   /** \brief Members: float descriptor[352], rf[9]
     * \ingroup common
@@ -587,7 +589,9 @@ namespace pcl {
   };
 } // namespace pcl
 
-#pragma warning(default: 4201)
+#if defined _MSC_VER
+  #pragma warning(default: 4201)
+#endif
 //#pragma warning(pop)
 #ifdef BUILD_Maintainer
 #  if defined __GNUC__
diff --git a/common/include/sensor_msgs/Image.h b/common/include/sensor_msgs/Image.h
deleted file mode 100644
index 6f488d7..0000000
--- a/common/include/sensor_msgs/Image.h
+++ /dev/null
@@ -1,61 +0,0 @@
-#ifndef PCL_MESSAGE_IMAGE_H
-#define PCL_MESSAGE_IMAGE_H
-#include <string>
-#include <vector>
-#include <ostream>
-
-// Include the correct Header path here
-#include "std_msgs/Header.h"
-
-namespace sensor_msgs
-{
-  struct Image
-  {
-    Image () : header (), height (0), width (0), encoding (), 
-               is_bigendian (0), step (0), data ()
-    {}
-
-     ::std_msgs::Header  header;
-
-    pcl::uint32_t height;
-    pcl::uint32_t width;
-    std::string encoding;
-
-    pcl::uint8_t is_bigendian;
-    pcl::uint32_t step;
-
-    std::vector<pcl::uint8_t> data;
-
-    typedef boost::shared_ptr< ::sensor_msgs::Image> Ptr;
-    typedef boost::shared_ptr< ::sensor_msgs::Image  const> ConstPtr;
-  }; // struct Image
-
-  typedef boost::shared_ptr< ::sensor_msgs::Image> ImagePtr;
-  typedef boost::shared_ptr< ::sensor_msgs::Image const> ImageConstPtr;
-
-  inline std::ostream& operator<<(std::ostream& s, const  ::sensor_msgs::Image & v)
-  {
-    s << "header: " << std::endl;
-    s << v.header;
-    s << "height: ";
-    s << "  " << v.height << std::endl;
-    s << "width: ";
-    s << "  " << v.width << std::endl;
-    s << "encoding: ";
-    s << "  " << v.encoding << std::endl;
-    s << "is_bigendian: ";
-    s << "  " << v.is_bigendian << std::endl;
-    s << "step: ";
-    s << "  " << v.step << std::endl;
-    s << "data[]" << std::endl;
-    for (size_t i = 0; i < v.data.size (); ++i)
-    {
-      s << "  data[" << i << "]: ";
-      s << "  " << v.data[i] << std::endl;
-    }
-    return (s);
-  }
-} // namespace sensor_msgs
-
-#endif // PCL_MESSAGE_IMAGE_H
-
diff --git a/common/include/sensor_msgs/PointCloud2.h b/common/include/sensor_msgs/PointCloud2.h
deleted file mode 100644
index 82f1e4e..0000000
--- a/common/include/sensor_msgs/PointCloud2.h
+++ /dev/null
@@ -1,101 +0,0 @@
-#ifndef PCL_SENSOR_MSGS_MESSAGE_POINTCLOUD2_H
-#define PCL_SENSOR_MSGS_MESSAGE_POINTCLOUD2_H
-#include <string>
-#include <vector>
-#include <ostream>
-
-// Include the correct Header path here
-#include "std_msgs/Header.h"
-#include "sensor_msgs/PointField.h"
-
-namespace sensor_msgs
-{
-
-#if (defined(__powerpc) || defined(__powerpc__) || defined(__POWERPC__) || defined(__ppc__) || defined(_M_PPC) || defined(__ARCH_PPC))
-#  define PCL_BIG_ENDIAN
-#elif (defined(i386) || defined(__i386__) || defined(__i386) || defined(_M_IX86) || defined(_X86_) || defined(__THW_INTEL__) || defined(__I86__) || defined(__INTEL__)) \
-  || (defined(__amd64__) || defined(__amd64) || defined(__x86_64__) || defined(__x86_64) || defined(_M_X64)) \
-	|| (defined(__ANDROID__))
-#  define PCL_LITTLE_ENDIAN
-#else
-#  error
-#endif
-
-  struct PointCloud2
-  {
-    PointCloud2 () : header (), height (0), width (0), fields (),
-                     is_bigendian (false), point_step (0), row_step (0),
-                     data (), is_dense (false)
-    {
-#ifdef PCL_BIG_ENDIAN
-      is_bigendian = true;
-#elif defined(PCL_LITTLE_ENDIAN)
-      is_bigendian = false;
-#else
-#      error
-#endif
-    }
-
-#undef PCL_BIG_ENDIAN
-#undef PCL_LITTLE_ENDIAN
-
-    ::std_msgs::Header header;
-
-    pcl::uint32_t height;
-    pcl::uint32_t width;
-
-    std::vector< ::sensor_msgs::PointField>  fields;
-
-    pcl::uint8_t is_bigendian;
-    pcl::uint32_t point_step;
-    pcl::uint32_t row_step;
-
-    std::vector<pcl::uint8_t> data;
-
-    pcl::uint8_t is_dense;
-
-  public:
-    typedef boost::shared_ptr< ::sensor_msgs::PointCloud2> Ptr;
-    typedef boost::shared_ptr< ::sensor_msgs::PointCloud2  const> ConstPtr;
-  }; // struct PointCloud2
-
-  typedef boost::shared_ptr< ::sensor_msgs::PointCloud2> PointCloud2Ptr;
-  typedef boost::shared_ptr< ::sensor_msgs::PointCloud2 const> PointCloud2ConstPtr;
-
-  inline std::ostream& operator<<(std::ostream& s, const  ::sensor_msgs::PointCloud2 &v)
-  {
-    s << "header: " << std::endl;
-    s << v.header;
-    s << "height: ";
-    s << "  " << v.height << std::endl;
-    s << "width: ";
-    s << "  " << v.width << std::endl;
-    s << "fields[]" << std::endl;
-    for (size_t i = 0; i < v.fields.size (); ++i)
-    {
-      s << "  fields[" << i << "]: ";
-      s << std::endl;
-      s << "    " << v.fields[i] << std::endl;
-    }
-    s << "is_bigendian: ";
-    s << "  " << v.is_bigendian << std::endl;
-    s << "point_step: ";
-    s << "  " << v.point_step << std::endl;
-    s << "row_step: ";
-    s << "  " << v.row_step << std::endl;
-    s << "data[]" << std::endl;
-    for (size_t i = 0; i < v.data.size (); ++i)
-    {
-      s << "  data[" << i << "]: ";
-      s << "  " << v.data[i] << std::endl;
-    }
-    s << "is_dense: ";
-    s << "  " << v.is_dense << std::endl;
-    
-    return (s);
-  }
-
-} // namespace sensor_msgs
-
-#endif // PCL_SENSOR_MSGS_MESSAGE_POINTCLOUD2_H
-
diff --git a/common/include/sensor_msgs/PointField.h b/common/include/sensor_msgs/PointField.h
deleted file mode 100644
index 64abde1..0000000
--- a/common/include/sensor_msgs/PointField.h
+++ /dev/null
@@ -1,54 +0,0 @@
-#ifndef PCL_SENSOR_MSGS_MESSAGE_POINTFIELD_H
-#define PCL_SENSOR_MSGS_MESSAGE_POINTFIELD_H
-#include <string>
-#include <vector>
-#include <ostream>
-#include <boost/shared_ptr.hpp>
-#include <pcl/pcl_macros.h>
-
-namespace sensor_msgs
-{
-  struct PointField
-  {
-    PointField () : name (), offset (0), datatype (0), count (0)
-    {}
-
-    std::string name;
-
-    pcl::uint32_t offset;
-    pcl::uint8_t datatype;
-    pcl::uint32_t count;
-
-    enum { INT8 = 1 };
-    enum { UINT8 = 2 };
-    enum { INT16 = 3 };
-    enum { UINT16 = 4 };
-    enum { INT32 = 5 };
-    enum { UINT32 = 6 };
-    enum { FLOAT32 = 7 };
-    enum { FLOAT64 = 8 };
-
-  public:
-    typedef boost::shared_ptr< ::sensor_msgs::PointField> Ptr;
-    typedef boost::shared_ptr< ::sensor_msgs::PointField const> ConstPtr;
-  }; // struct PointField
-
-  typedef boost::shared_ptr< ::sensor_msgs::PointField> PointFieldPtr;
-  typedef boost::shared_ptr< ::sensor_msgs::PointField const> PointFieldConstPtr;
-
-  inline std::ostream& operator<<(std::ostream& s, const  ::sensor_msgs::PointField & v)
-  {
-    s << "name: ";
-    s << "  " << v.name << std::endl;
-    s << "offset: ";
-    s << "  " << v.offset << std::endl;
-    s << "datatype: ";
-    s << "  " << v.datatype << std::endl;
-    s << "count: ";
-    s << "  " << v.count << std::endl;
-    return (s);
-  }
-} // namespace sensor_msgs
-
-#endif // PCL_SENSOR_MSGS_MESSAGE_POINTFIELD_H
-
diff --git a/common/include/std_msgs/Header.h b/common/include/std_msgs/Header.h
deleted file mode 100644
index 19b18af..0000000
--- a/common/include/std_msgs/Header.h
+++ /dev/null
@@ -1,39 +0,0 @@
-#ifndef PCL_ROSLIB_MESSAGE_HEADER_H
-#define PCL_ROSLIB_MESSAGE_HEADER_H
-#include <string>
-#include <vector>
-#include <boost/shared_ptr.hpp>
-#include <pcl/pcl_macros.h>
-#include <ostream>
-
-namespace std_msgs
-{
-  struct Header
-  {
-    Header (): seq (0), stamp (), frame_id ()
-    {}
-
-    pcl::uint32_t seq;
-    pcl::uint64_t stamp;
-
-    std::string frame_id;
-
-    typedef boost::shared_ptr<Header> Ptr;
-    typedef boost::shared_ptr<Header const> ConstPtr;
-  }; // struct Header
-
-  typedef boost::shared_ptr<Header> HeaderPtr;
-  typedef boost::shared_ptr<Header const> HeaderConstPtr;
-
-  inline std::ostream& operator << (std::ostream& out, const Header &h)
-  {
-    out << "seq: " << h.seq;
-    out << " stamp: " << h.stamp;
-    out << " frame_id: " << h.frame_id << std::endl;
-    return (out);
-  }
-
-} // namespace std_msgs
-
-#endif // PCL_ROSLIB_MESSAGE_HEADER_H
-
-- 
1.7.9.5

